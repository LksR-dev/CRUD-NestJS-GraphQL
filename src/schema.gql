# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Roles {
  ID: Int!
  name: String!
  developers: [Developers!]!
  projects: [Projects!]!
}

type Projects {
  ID: Int!
  name: String!
  description: String!
  status: Status!
  rolesID: [Int!]!
  developers: [Developers!]!
  roles: [Roles!]!
  developersOnTheProject: [Developers!]!
}

"""The status of the project, it will be CLOSED or IN_PROGRESS"""
enum Status {
  CLOSED
  IN_PROGRESS
}

type Developers {
  ID: Int!
  name: String!
  email: String!
  projects: [Projects!]!
  roles: [String!]!
  roleID: [Int!]!
  projectID: [Int!]!
}

input Role {
  ID: Int!
  name: String!
  developers: [Developer!]!
  projects: [Project!]!
}

input Project {
  ID: Int!
  name: String!
  description: String!
  status: Status!
  rolesID: [Int!]!
  developers: [Developer!]!
  roles: [Role!]!
  developersOnTheProject: [Developer!]!
}

input Developer {
  ID: Int!
  name: String!
  email: String!
  projects: [Project!]!
  roles: [String!]!
  roleID: [Int!]!
  projectID: [Int!]!
}

type Query {
  findAllProjects: [Projects!]!
  filterProjectByRol(rol: String!): [Projects!]!
  filterProjectByStatus(status: Float!): [Projects!]!
  findAllDevs: [Developers!]!
  findAllDevsByProject(id: Int!): [Developers!]!
  findOne(id: Int!): Developers!
}

type Mutation {
  createProject(projectInput: CreateProjectInput!): Projects!
  createDeveloper(createDeveloperInput: CreateDeveloperInput!): Developers!
  updateDeveloper(updateDev: UpdateDeveloperInput!): Developers!
  createRole(roleInput: CreateRoleInput!): Roles!
}

input CreateProjectInput {
  name: String!
  description: String!
  status: Float!
  rolesID: [Int!]!
}

input CreateDeveloperInput {
  name: String!
  email: String!
  projectID: [Int!]!
  roleID: [Int!]!
}

input UpdateDeveloperInput {
  ID: Int!
  projectID: [Int!]!
}

input CreateRoleInput {
  name: String!
}